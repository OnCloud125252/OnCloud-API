name: Build and Deploy

on:
  push:
    branches:
      - main
      - development

jobs:
  validate-commit-message:
    name: Validate Commit Message
    runs-on: ubuntu-latest
    outputs:
      commit_message: ${{ steps.check_commit_message.outputs.commit_message }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check commit message
        id: check_commit_message
        run: |
          commit_message=$(git log --format=%B -n 1 ${{ github.sha }})
          if [[ $commit_message =~ ^[0-9]+\.[0-9]+\.[0-9] ]]; then
            echo "commit_message=$commit_message" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate GitHub summary
        if: always()
        run: |
          if [[ "${{ steps.check_commit_message.outputs.commit_message }}" != "" ]]; then
            echo "## :white_check_mark: Versioned push" >> $GITHUB_STEP_SUMMARY
            echo "Initiating Docker image build and push for version \`${{ steps.check_commit_message.outputs.commit_message }}\`." >> $GITHUB_STEP_SUMMARY
          else
            echo "## :x: This push does not qualify as a version push" >> $GITHUB_STEP_SUMMARY
            echo "Skipping the build and push process." >> $GITHUB_STEP_SUMMARY
          fi

  build-and-push:
    name: Build and Push Docker Image
    needs: [validate-commit-message]
    if: ${{ needs.validate-commit-message.outputs.commit_message != '' }}
    runs-on: blacksmith-32vcpu-ubuntu-2204
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Ensure jq is installed
        run: |
          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing jq..."
            sudo apt-get update
            sudo apt-get install -y jq
          else
            echo "jq is already installed"
          fi

      - name: Extract image name and version from package.json
        id: vars
        run: |
          IMAGE_NAME=$(jq -r '.name' package.json)
          IMAGE_VERSION=$(jq -r '.version' package.json)
          if [ "${{ github.ref }}" == "refs/heads/development" ]; then
            IMAGE_NAME="${IMAGE_NAME}-development"
          fi
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set start time
        run: |
          echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
            ${{ vars.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Post-build summary
        run: |
          CURRENT_TIME=$(date +%s)
          ELAPSED=$(( CURRENT_TIME - ${START_TIME} ))
          echo "ELAPSED=$ELAPSED" >> $GITHUB_ENV
          echo "## Docker Image Summary" >> $GITHUB_STEP_SUMMARY
          echo "The following tags were pushed:" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ vars.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ vars.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Docker image built and pushed successfully in ${ELAPSED}s." >> $GITHUB_STEP_SUMMARY
